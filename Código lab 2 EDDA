import java.util.*;
import java.io.*;

class Voto {
    private int id;
    private int votanteId;
    private int candidatoId;
    private String timeStamp;

    public Voto (int id, int votanteId, int candidatoId, String timeStamp){
        this.id=id;
        this.votanteId=votanteId;
        this.candidatoId=candidatoId;
        this.timeStamp=timeStamp;
    }

    public void setId(int id){this.id=id;}
    public void setVotanteId(int votanteId){this.votanteId=votanteId;}
    public void setCandidatoId(int candidatoId){this.candidatoId=candidatoId;}
    public void setTimeStamp(String timeStamp){this.timeStamp=timeStamp;}

    public int getId(){return id;}
    public int getVotanteId(){return votanteId;}
    public int getCandidatoId(){return candidatoId;}
    public String getTimeStamp(){return timeStamp;}
}

class Candidato {
    private int id;
    private String nombre;
    private String partido;
    private Queue<Voto> votosRecibidos;

    public Candidato (int id, String nombre, String partido, Queue<Voto> votosRecibidos){
        this.id=id;
        this.nombre=nombre;
        this.partido=partido;
        this.votosRecibidos=votosRecibidos;
    }

    public void setId(int id){this.id=id;}
    public void setNombre(String nombre){this.nombre=nombre;}
    public void setPartido(String partido){this.partido=partido;}
    public void setVotosRecibidos(Queue<Voto> votosRecibidos){this.votosRecibidos=votosRecibidos;}

    public int getId(){return id;}
    public String getNombre(){return nombre;}
    public String getPartido(){return partido;}
    public Queue<Voto> getVotosRecibidos(){return votosRecibidos;}

    public void agregarVoto(Voto v) {
        if (v == null) {
            throw new IllegalArgumentException("El voto no puede ser nulo");
        }
        votosRecibidos.add(v);
    }
}

class Votante {
    private int id;
    private String nombre;
    private boolean yaVoto;

    public Votante (int id, String nombre, boolean yaVoto){
        this.id=id;
        this.nombre=nombre;
        this.yaVoto=yaVoto;
    }

    public void setId(int id){this.id=id;}
    public void setNombre(String nombre){this.nombre=nombre;}
    public void setYaVoto(boolean yaVoto){this.yaVoto=yaVoto;}

    public int getId(){return id;}
    public String getNombre(){return nombre;}
    public boolean getYaVoto(){return yaVoto;}

    public void marcarComoVotado(){
        this.yaVoto=true;
    }
}

class UrnaElectoral {
    LinkedList<Candidato> listaCandidatos;
    private Stack<Voto> historialVotos;
    private Queue<Voto> votosReportados;
    private int idCounter;

    public UrnaElectoral (){
        listaCandidatos = new LinkedList<>();
        historialVotos = new Stack<>();
        votosReportados = new LinkedList<>();
        idCounter = 1;
    }

    public boolean verificarVotante(Votante votante){
        return !votante.getYaVoto();
    }

    public void registrarVoto(Votante votante, int candidatoID) {
        if (votante.getYaVoto()) return;

        for (Candidato candidato : listaCandidatos) {
            if (candidato.getId() == candidatoID){
                Voto nuevoVoto = new Voto(idCounter++, votante.getId(), candidatoID, new Date().toString());
                candidato.agregarVoto(nuevoVoto);
                historialVotos.push(nuevoVoto);
                votante.marcarComoVotado();
                break;
            }
        }
    }

    public void reportarVoto (Candidato candidato, int idVoto){
        for (Voto voto : candidato.getVotosRecibidos()){
            if (voto.getId() == idVoto){
                if (votosReportados.contains(voto)){
                    System.out.println("Fraude detectado. El voto ya ha sido reportado.");
                    return;
                }
                votosReportados.add(voto);
                System.out.println("Voto reportado exitosamente.");
                return;
            }
        }

        System.out.println("Voto no encontrado para el candidato con ID: " + candidato.getId());
    }

    public Map<String, Integer> obtenerResultados() {
        Map<String, Integer> resultados = new HashMap<>();

        for (Candidato candidato : listaCandidatos) {
            String nombre = candidato.getNombre();
            int cantidadVotos = candidato.getVotosRecibidos().size();
            resultados.put(nombre, cantidadVotos);
        }

        return resultados;
    }
}


public class Main {
    public static void main(String[] args) {
        Candidato candidato1 = new Candidato(1, "Benito", "Partido azul", new LinkedList<>());
        Candidato candidato2 = new Candidato(2, "Maria", "Partido verde", new LinkedList<>());
        Votante votante1 = new Votante(234, "Pedro", false);
        Votante votante2 = new Votante(112, "Juan", false);
        Votante votante3 = new Votante(154, "Diego", false);
        UrnaElectoral urna = new UrnaElectoral();

        urna.listaCandidatos.add(candidato1);
        urna.listaCandidatos.add(candidato2);

        System.out.println("Registro de voto único");
        urna.registrarVoto(votante1, 1);
        urna.registrarVoto(votante1, 2);

        System.out.println("\nRegistro correcto de voto");
        urna.registrarVoto(votante2, 2);
        urna.registrarVoto(votante3, 1);

        System.out.println("\nReporte de voto existente");
        urna.reportarVoto(candidato1, 1);

        System.out.println("\nReporte de voto duplicado");
        urna.reportarVoto(candidato1, 1);

        System.out.println("\nReporte de voto inexistente");
        urna.reportarVoto(candidato1, 999);

        System.out.println("\nResultados de la elección");
        Map<String, Integer> resultados = urna.obtenerResultados();
        for (Map.Entry<String, Integer> entry : resultados.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue() + " votos");
        }

        Voto voto = new Voto(999, votante3.getId(), 1, new Date().toString());
        System.out.println("\nHora del voto: " + voto.getTimeStamp());
    }
}
